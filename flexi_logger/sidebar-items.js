initSidebarItems({"enum":[["FlexiLoggerError","Describes errors in the initialization of flexi_logger."],["LogLevel","An enum representing the available verbosity levels of the logging framework."],["LogLevelFilter","An enum representing the available verbosity level filters of the logging framework."]],"fn":[["default_format","A logline-formatter that produces log lines like  `INFO [my_prog::some_submodule] Task successfully read from conf.json`"],["detailed_format","A logline-formatter that produces log lines like  `[2016-01-13 15:25:01.640870 +01:00] INFO [foo::bar] src/foo/bar.rs:26: Task successfully read from conf.json`  i.e. with timestamp, module path and file location."],["init","Initializes the flexi_logger to your needs, and the global logger with flexi_logger."],["opt_format","A logline-formatter that produces log lines like  `[2016-01-13 15:25:01.640870 +01:00] INFO [src/foo/bar:26] Task successfully read from conf.json`  i.e. with timestamp and file location."],["with_thread","A logline-formatter that produces log lines like  `[2016-01-13 15:25:01.640870 +01:00] T[taskreader] INFO [src/foo/bar:26] Task successfully read from conf.json`  i.e. with timestamp, thread name and file location."]],"struct":[["FlexiLogger","Does the logging in the background, is normally not used directly."],["LogConfig","Internal struct for influencing the behavior of flexi_logger."],["LogOptions","Allows initializing flexi_logger to your needs."],["LogRecord","The \"payload\" of a log message. This structure is primarily used as a parameter in the [`log`] method of the [`Log`] trait."]]});